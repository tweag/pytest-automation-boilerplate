{"uid":"7ecd25baae7b01b6","name":"Test GET Call","fullName":"api/api_tests.feature:Test GET Call","historyId":"198a0ff6abf3205fc1cabaf617ffa39d","time":{"start":1712696603498,"stop":1712696603763,"duration":265},"status":"failed","statusMessage":"AssertionError: Expected <200> to be equal to <2000>, but was not.","statusTrace":"request = <FixtureRequest for <Function test_test_get_call>>\n_pytest_bdd_example = {}\n\n    @pytest.mark.usefixtures(*func_args)\n    def scenario_wrapper(request: FixtureRequest, _pytest_bdd_example: dict[str, str]) -> Any:\n        scenario = templated_scenario.render(_pytest_bdd_example)\n>       _execute_scenario(feature, scenario, request)\n\n../../../.bp-venv/lib/python3.9/site-packages/pytest_bdd/scenario.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.bp-venv/lib/python3.9/site-packages/pytest_bdd/scenario.py:157: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\n../../../.bp-venv/lib/python3.9/site-packages/pytest_bdd/scenario.py:127: in _execute_step_function\n    return_value = call_fixture_func(fixturefunc=step_func, request=request, kwargs=kwargs)\n../../../.bp-venv/lib/python3.9/site-packages/_pytest/fixtures.py:932: in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = {'get_response': [{'body': 'quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestia...oremque molestiae', 'id': 6, 'title': 'dolorem eum magni eos aperiam quia', 'userId': 1}, ...], 'get_status_code': 200}\nrequest_type = 'GET', status_code = 2000\n\n    @then(parsers.re(\"I expect the HTTP response code of '(?P<request_type>.*)' to be '(?P<status_code>.*)'\"),\n          converters=dict(status_code=int, request_type=str))\n    def validate_status_code(context, request_type, status_code):\n        if request_type == \"POST\":\n            assert_that(context[\"post_status_code\"]).is_equal_to(status_code)\n        elif request_type == \"GET\":\n>           assert_that(context[\"get_status_code\"]).is_equal_to(status_code)\nE           AssertionError: Expected <200> to be equal to <2000>, but was not.\n\nfrontend/test_project/step_definitions/shared_steps/api_assertions.py:11: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: Expected <200> to be equal to <2000>, but was not.","statusTrace":"request = <FixtureRequest for <Function test_test_get_call>>\n_pytest_bdd_example = {}\n\n    @pytest.mark.usefixtures(*func_args)\n    def scenario_wrapper(request: FixtureRequest, _pytest_bdd_example: dict[str, str]) -> Any:\n        scenario = templated_scenario.render(_pytest_bdd_example)\n>       _execute_scenario(feature, scenario, request)\n\n../../../.bp-venv/lib/python3.9/site-packages/pytest_bdd/scenario.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.bp-venv/lib/python3.9/site-packages/pytest_bdd/scenario.py:157: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\n../../../.bp-venv/lib/python3.9/site-packages/pytest_bdd/scenario.py:127: in _execute_step_function\n    return_value = call_fixture_func(fixturefunc=step_func, request=request, kwargs=kwargs)\n../../../.bp-venv/lib/python3.9/site-packages/_pytest/fixtures.py:932: in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = {'get_response': [{'body': 'quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestia...oremque molestiae', 'id': 6, 'title': 'dolorem eum magni eos aperiam quia', 'userId': 1}, ...], 'get_status_code': 200}\nrequest_type = 'GET', status_code = 2000\n\n    @then(parsers.re(\"I expect the HTTP response code of '(?P<request_type>.*)' to be '(?P<status_code>.*)'\"),\n          converters=dict(status_code=int, request_type=str))\n    def validate_status_code(context, request_type, status_code):\n        if request_type == \"POST\":\n            assert_that(context[\"post_status_code\"]).is_equal_to(status_code)\n        elif request_type == \"GET\":\n>           assert_that(context[\"get_status_code\"]).is_equal_to(status_code)\nE           AssertionError: Expected <200> to be equal to <2000>, but was not.\n\nfrontend/test_project/step_definitions/shared_steps/api_assertions.py:11: AssertionError","steps":[{"name":"Given I set api base url '{%API_BASE_URL%}'","time":{"start":1712696603499,"stop":1712696603499,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"And I set the header param request content type as 'application/json'","time":{"start":1712696603499,"stop":1712696603499,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Given I set the GET endpoint to '/posts' for fetching posts","time":{"start":1712696603500,"stop":1712696603500,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When I send a GET HTTP request","time":{"start":1712696603500,"stop":1712696603761,"duration":261},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Then I expect the HTTP response code of 'GET' to be '2000'","time":{"start":1712696603761,"stop":1712696603762,"duration":1},"status":"failed","statusMessage":"Expected <200> to be equal to <2000>, but was not.","statusTrace":"AssertionError: Expected <200> to be equal to <2000>, but was not.\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":5,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az1380-140"},{"name":"thread","value":"2390-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test HTTP methods for a REST API"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"7ecd25baae7b01b6.json","parameterValues":[]}