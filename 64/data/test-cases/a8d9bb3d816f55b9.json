{"uid":"a8d9bb3d816f55b9","name":"Test GET Call","fullName":"api/api_tests.feature:Test GET Call","historyId":"198a0ff6abf3205fc1cabaf617ffa39d","time":{"start":1712955831600,"stop":1712955831629,"duration":29},"status":"failed","statusMessage":"AssertionError: Expected <200> to be equal to <2000>, but was not.","statusTrace":"request = <FixtureRequest for <Function test_test_get_call>>\n_pytest_bdd_example = {}\n\n    @pytest.mark.usefixtures(*func_args)\n    def scenario_wrapper(request: FixtureRequest, _pytest_bdd_example: dict[str, str]) -> Any:\n        scenario = templated_scenario.render(_pytest_bdd_example)\n>       _execute_scenario(feature, scenario, request)\n\n../../../.bp-venv/lib/python3.9/site-packages/pytest_bdd/scenario.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.bp-venv/lib/python3.9/site-packages/pytest_bdd/scenario.py:157: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\n../../../.bp-venv/lib/python3.9/site-packages/pytest_bdd/scenario.py:127: in _execute_step_function\n    return_value = call_fixture_func(fixturefunc=step_func, request=request, kwargs=kwargs)\n../../../.bp-venv/lib/python3.9/site-packages/_pytest/fixtures.py:932: in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = {'get_response': [{'body': 'quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestia...oremque molestiae', 'id': 6, 'title': 'dolorem eum magni eos aperiam quia', 'userId': 1}, ...], 'get_status_code': 200}\nrequest_type = 'GET', status_code = 2000\n\n    @then(parsers.re(\"I expect the HTTP response code of '(?P<request_type>.*)' to be '(?P<status_code>.*)'\"),\n          converters=dict(status_code=int, request_type=str))\n    def validate_status_code(context, request_type, status_code):\n        if request_type == \"POST\":\n            assert_that(context[\"post_status_code\"]).is_equal_to(status_code)\n        elif request_type == \"GET\":\n>           assert_that(context[\"get_status_code\"]).is_equal_to(status_code)\nE           AssertionError: Expected <200> to be equal to <2000>, but was not.\n\nfrontend/test_project/step_definitions/shared_steps/api_assertions.py:11: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: Expected <200> to be equal to <2000>, but was not.","statusTrace":"request = <FixtureRequest for <Function test_test_get_call>>\n_pytest_bdd_example = {}\n\n    @pytest.mark.usefixtures(*func_args)\n    def scenario_wrapper(request: FixtureRequest, _pytest_bdd_example: dict[str, str]) -> Any:\n        scenario = templated_scenario.render(_pytest_bdd_example)\n>       _execute_scenario(feature, scenario, request)\n\n../../../.bp-venv/lib/python3.9/site-packages/pytest_bdd/scenario.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.bp-venv/lib/python3.9/site-packages/pytest_bdd/scenario.py:157: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\n../../../.bp-venv/lib/python3.9/site-packages/pytest_bdd/scenario.py:127: in _execute_step_function\n    return_value = call_fixture_func(fixturefunc=step_func, request=request, kwargs=kwargs)\n../../../.bp-venv/lib/python3.9/site-packages/_pytest/fixtures.py:932: in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = {'get_response': [{'body': 'quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestia...oremque molestiae', 'id': 6, 'title': 'dolorem eum magni eos aperiam quia', 'userId': 1}, ...], 'get_status_code': 200}\nrequest_type = 'GET', status_code = 2000\n\n    @then(parsers.re(\"I expect the HTTP response code of '(?P<request_type>.*)' to be '(?P<status_code>.*)'\"),\n          converters=dict(status_code=int, request_type=str))\n    def validate_status_code(context, request_type, status_code):\n        if request_type == \"POST\":\n            assert_that(context[\"post_status_code\"]).is_equal_to(status_code)\n        elif request_type == \"GET\":\n>           assert_that(context[\"get_status_code\"]).is_equal_to(status_code)\nE           AssertionError: Expected <200> to be equal to <2000>, but was not.\n\nfrontend/test_project/step_definitions/shared_steps/api_assertions.py:11: AssertionError","steps":[{"name":"Given I set api base url '{%API_BASE_URL%}'","time":{"start":1712955831600,"stop":1712955831600,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"And I set the header param request content type as 'application/json'","time":{"start":1712955831600,"stop":1712955831600,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Given I set the GET endpoint to '/posts' for fetching posts","time":{"start":1712955831600,"stop":1712955831600,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When I send a GET HTTP request","time":{"start":1712955831601,"stop":1712955831626,"duration":25},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Then I expect the HTTP response code of 'GET' to be '2000'","time":{"start":1712955831626,"stop":1712955831627,"duration":1},"status":"failed","statusMessage":"Expected <200> to be equal to <2000>, but was not.","statusTrace":"AssertionError: Expected <200> to be equal to <2000>, but was not.\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":5,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az1672-965"},{"name":"thread","value":"2365-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test HTTP methods for a REST API"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"a3d844b402b04e12","status":"failed","statusDetails":"AssertionError: Expected <200> to be equal to <2000>, but was not.","time":{"start":1712955829137,"stop":1712955829284,"duration":147}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":11,"broken":0,"skipped":0,"passed":13,"unknown":0,"total":24},"items":[{"uid":"f6455276ad6060e7","reportUrl":"https://tweag.github.io/pytest-automation-boilerplate/63//#testresult/f6455276ad6060e7","status":"failed","statusDetails":"AssertionError: Expected <200> to be equal to <2000>, but was not.","time":{"start":1712869388690,"stop":1712869388714,"duration":24}},{"uid":"89312198b693adf","reportUrl":"https://tweag.github.io/pytest-automation-boilerplate/62//#testresult/89312198b693adf","status":"failed","statusDetails":"AssertionError: Expected <200> to be equal to <2000>, but was not.","time":{"start":1712783004195,"stop":1712783004222,"duration":27}},{"uid":"4ab255c40db98c85","reportUrl":"https://tweag.github.io/pytest-automation-boilerplate/61//#testresult/4ab255c40db98c85","status":"failed","statusDetails":"AssertionError: Expected <200> to be equal to <2000>, but was not.","time":{"start":1712731181925,"stop":1712731181942,"duration":17}},{"uid":"4c6fcfef5c4b643a","reportUrl":"https://tweag.github.io/pytest-automation-boilerplate/60//#testresult/4c6fcfef5c4b643a","status":"failed","statusDetails":"AssertionError: Expected <200> to be equal to <2000>, but was not.","time":{"start":1712696605973,"stop":1712696606015,"duration":42}},{"uid":"8fc5f51068ea4c44","reportUrl":"https://tweag.github.io/pytest-automation-boilerplate/59//#testresult/8fc5f51068ea4c44","status":"failed","statusDetails":"AssertionError: Expected <200> to be equal to <2000>, but was not.","time":{"start":1712610197341,"stop":1712610197365,"duration":24}},{"uid":"60c40f06dcd88a1c","reportUrl":"https://tweag.github.io/pytest-automation-boilerplate/58//#testresult/60c40f06dcd88a1c","status":"failed","statusDetails":"AssertionError: Expected <200> to be equal to <2000>, but was not.","time":{"start":1712524090088,"stop":1712524090107,"duration":19}},{"uid":"e141b288d14c5d72","reportUrl":"https://tweag.github.io/pytest-automation-boilerplate/57//#testresult/e141b288d14c5d72","status":"failed","statusDetails":"AssertionError: Expected <200> to be equal to <2000>, but was not.","time":{"start":1712437659426,"stop":1712437659440,"duration":14}},{"uid":"8a3b5eb1ba9489ed","reportUrl":"https://tweag.github.io/pytest-automation-boilerplate/56//#testresult/8a3b5eb1ba9489ed","status":"failed","statusDetails":"AssertionError: Expected <200> to be equal to <2000>, but was not.","time":{"start":1712350986125,"stop":1712350986156,"duration":31}},{"uid":"79323e898e87526e","reportUrl":"https://tweag.github.io/pytest-automation-boilerplate/55//#testresult/79323e898e87526e","status":"failed","statusDetails":"AssertionError: Expected <200> to be equal to <2000>, but was not.","time":{"start":1712264599695,"stop":1712264599709,"duration":14}},{"uid":"50a894cb0f19c3cf","reportUrl":"https://tweag.github.io/pytest-automation-boilerplate/54//#testresult/50a894cb0f19c3cf","status":"failed","statusDetails":"AssertionError: Expected <200> to be equal to <2000>, but was not.","time":{"start":1712178199407,"stop":1712178199432,"duration":25}},{"uid":"e366ae5b6bb85fe3","reportUrl":"https://tweag.github.io/pytest-automation-boilerplate/53//#testresult/e366ae5b6bb85fe3","status":"passed","time":{"start":1712091823935,"stop":1712091824082,"duration":147}},{"uid":"71597eff4a2c34f8","reportUrl":"https://tweag.github.io/pytest-automation-boilerplate/52//#testresult/71597eff4a2c34f8","status":"passed","time":{"start":1712005384363,"stop":1712005384531,"duration":168}},{"uid":"e8d23483e15a1fea","reportUrl":"https://tweag.github.io/pytest-automation-boilerplate/51//#testresult/e8d23483e15a1fea","status":"passed","time":{"start":1711919276719,"stop":1711919276775,"duration":56}},{"uid":"20197841e4661dd8","reportUrl":"https://tweag.github.io/pytest-automation-boilerplate/50//#testresult/20197841e4661dd8","status":"passed","time":{"start":1711832880607,"stop":1711832880701,"duration":94}},{"uid":"d5f234a580262ae7","reportUrl":"https://tweag.github.io/pytest-automation-boilerplate/49//#testresult/d5f234a580262ae7","status":"passed","time":{"start":1711746174943,"stop":1711746175154,"duration":211}},{"uid":"72b733254ec65733","reportUrl":"https://tweag.github.io/pytest-automation-boilerplate/48//#testresult/72b733254ec65733","status":"passed","time":{"start":1711659777470,"stop":1711659777618,"duration":148}},{"uid":"324ccef04f09a3e4","reportUrl":"https://tweag.github.io/pytest-automation-boilerplate/47//#testresult/324ccef04f09a3e4","status":"passed","time":{"start":1711573391755,"stop":1711573391896,"duration":141}},{"uid":"e0cdd46ec5fdd0f7","reportUrl":"https://tweag.github.io/pytest-automation-boilerplate/46//#testresult/e0cdd46ec5fdd0f7","status":"passed","time":{"start":1711536607471,"stop":1711536607544,"duration":73}},{"uid":"b1d16d3332b32dd5","reportUrl":"https://tweag.github.io/pytest-automation-boilerplate/45//#testresult/b1d16d3332b32dd5","status":"passed","time":{"start":1711529412003,"stop":1711529412019,"duration":16}},{"uid":"1d2d7723e5a3cd0f","reportUrl":"https://tweag.github.io/pytest-automation-boilerplate/43//#testresult/1d2d7723e5a3cd0f","status":"passed","time":{"start":1711487002833,"stop":1711487002862,"duration":29}}]},"tags":[]},"source":"a8d9bb3d816f55b9.json","parameterValues":[]}